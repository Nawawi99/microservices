---
version: '3.7'

networks:
  local-network:
    external: true

services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - local-network
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - local-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    restart: on-failure
    networks:
      - local-network
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  config-server:
    image: ahmadnawawi99/config-server:0.0.1-SNAPSHOT
    #pull_policy: always
    container_name: config-server
    ports:
      - "8090:8090"
    expose:
      - "8090"
    networks:
      - local-network
    restart: on-failure

  discovery-server:
    image: ahmadnawawi99/discovery-server:0.0.1-SNAPSHOT
    #pull_policy: always
    container_name: discovery-server
    ports:
      - "8761:8761"
    expose:
      - "8761"
    networks:
      - local-network
    environment:
      - SPRING_APPLICATION_NAME=discovery-server
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8090
      - SPRING_CLOUD_CONFIG_LABEL=dockerized
    restart: on-failure
    depends_on:
      - config-server

  api-gateway:
    image: ahmadnawawi99/api-gateway:0.0.1-SNAPSHOT
    #pull_policy: always
    container_name: api-gateway
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      - SPRING_APPLICATION_NAME=api-gateway
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8090
      - SPRING_CLOUD_CONFIG_LABEL=dockerized
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    networks:
      - local-network
    depends_on:
      - discovery-server
      - config-server
    restart: on-failure

  authentication-service:
    container_name: authentication-service
    image: ahmadnawawi99/authentication-service:0.0.1-SNAPSHOT
    #pull_policy: always
    environment:
      - SPRING_APPLICATION_NAME=authentication-service
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8090
      - SPRING_CLOUD_CONFIG_LABEL=dockerized
    networks:
      - local-network
    depends_on:
      - discovery-server
      - api-gateway
      - config-server
    restart: on-failure

  product-service:
    container_name: product-service
    image: ahmadnawawi99/product-service:0.0.1-SNAPSHOT
    #pull_policy: always
    environment:
      - SPRING_APPLICATION_NAME=product-service
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8090
      - SPRING_CLOUD_CONFIG_LABEL=dockerized
    depends_on:
      - discovery-server
      - api-gateway
      - config-server
    networks:
      - local-network
    restart: on-failure

  order-service:
    container_name: order-service
    image: ahmadnawawi99/order-service:0.0.1-SNAPSHOT
    #pull_policy: always
    environment:
      - SPRING_APPLICATION_NAME=order-service
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8090
      - SPRING_CLOUD_CONFIG_LABEL=dockerized
    depends_on:
      - broker
      - discovery-server
      - api-gateway
      - rabbitmq
      - config-server
    networks:
      - local-network
    restart: on-failure

  inventory-service:
    container_name: inventory-service
    image: ahmadnawawi99/inventory-service:0.0.1-SNAPSHOT
    #pull_policy: always
    environment:
      - SPRING_APPLICATION_NAME=inventory-service
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8090
      - SPRING_CLOUD_CONFIG_LABEL=dockerized
    depends_on:
      - discovery-server
      - api-gateway
      - config-server
    networks:
      - local-network
    restart: on-failure

  notification-service:
    container_name: notification-service
    image: ahmadnawawi99/notification-service:0.0.1-SNAPSHOT
    #pull_policy: always
    environment:
      - SPRING_APPLICATION_NAME=notification-service
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8090
      - SPRING_CLOUD_CONFIG_LABEL=dockerized
    depends_on:
      - config-server
      - discovery-server
      - api-gateway
      - broker
    networks:
      - local-network
    restart: on-failure

  payment-service:
    container_name: payment-service
    image: ahmadnawawi99/payment-service:0.0.1-SNAPSHOT
    #pull_policy: always
    environment:
      - SPRING_APPLICATION_NAME=payment-service
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8090
      - SPRING_CLOUD_CONFIG_LABEL=dockerized
    depends_on:
      - discovery-server
      - api-gateway
      - rabbitmq
      - config-server
    networks:
      - local-network
    restart: on-failure

  alert-manager:
    image: prom/alertmanager
    container_name: alert-manager
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - '9093:9093'
    networks:
      - local-network

  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service
      - payment-service
      - authentication-service
      - alert-manager
    networks:
      - local-network

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - local-network

# The solution to hard coded IPs
# 1- Create a network --> docker network create local-network
# 2- Run an external service on that network --> docker run -d --name mongo -p 27017:27017 --network local-network mongo:latest
# 3- Define/register the network in the docker compose
#       networks:
#         local-network:
#           external: true
# 4- for each service add
#       networks:
#         - local-network
# 5- Remove hard coded IPs
